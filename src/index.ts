/**
 * Gemini Plant Diagnosis MCP Server
 *
 * Provides plant disease diagnosis using Google Gemini 2.0 Flash vision model
 * via Model Context Protocol (MCP) StreamableHTTP
 */

import 'dotenv/config';
import express from 'express';
import cors from 'cors';
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { StreamableHTTPServerTransport } from '@modelcontextprotocol/sdk/server/streamableHttp.js';
import { z } from 'zod';
import { GoogleGenerativeAI } from '@google/generative-ai';

const app = express();

// Middleware
app.use(express.json({ limit: '10mb' }));
app.use(cors({
  origin: process.env.ALLOWED_ORIGINS?.split(',') || '*',
  methods: ['GET', 'POST', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

// Environment variables
const GEMINI_API_KEY = process.env.GEMINI_API_KEY || '';
const GEMINI_IMAGE_MODEL = process.env.GEMINI_IMAGE_MODEL || 'gemini-2.0-flash-exp';
const PORT = process.env.PORT || 3001;

// Warn if token is missing
if (!GEMINI_API_KEY) {
  console.warn('‚ö†Ô∏è  WARNING: GEMINI_API_KEY environment variable is not set!');
  console.warn('‚ö†Ô∏è  Server will start but diagnosis tool will not work until key is configured.');
}

// Initialize Gemini AI
const genAI = GEMINI_API_KEY ? new GoogleGenerativeAI(GEMINI_API_KEY) : null;

// Supported crops
const SUPPORTED_CROPS = [
  'maize', 'wheat', 'rice', 'sorghum', 'millet',
  'beans', 'cowpea', 'pigeon_pea', 'groundnut',
  'cassava', 'sweet_potato', 'potato',
  'tomato', 'cabbage', 'kale', 'onion', 'vegetables',
  'tea', 'coffee', 'sugarcane', 'banana', 'sunflower', 'cotton'
] as const;

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    service: 'plant-health-diagnosis-mcp',
    timestamp: new Date().toISOString(),
    version: '1.0.0',
    configured: !!GEMINI_API_KEY
  });
});

// Root endpoint
app.get('/', (req, res) => {
  res.json({
    service: 'Plant Health Diagnosis MCP Server',
    version: '1.0.0',
    description: 'Region-agnostic plant disease, pest, and health diagnosis using AI vision analysis. Provides structured diagnostic data only (crop ID, health status, issue detection). Treatment recommendations should be generated by the calling agent based on region.',
    endpoints: {
      health: '/health',
      mcp: '/mcp (POST)'
    },
    tools: [
      'diagnose_plant_disease'
    ],
    supportedCrops: SUPPORTED_CROPS.length
  });
});

// Main MCP endpoint
app.post('/mcp', async (req, res) => {
  try {
    const transport = new StreamableHTTPServerTransport({
      sessionIdGenerator: undefined // Stateless
    });

    const server = new McpServer({
      name: 'Plant Health Diagnosis',
      version: '1.0.0',
      description: 'Region-agnostic plant disease, pest, and health diagnosis. Returns structured diagnostic data (crop ID, health status, issues). NO treatment recommendations.'
    });

    // Tool: Diagnose Plant Disease (Diagnosis Only - No Treatment)
    server.tool(
      'diagnose_plant_disease',
      'Analyzes plant images to identify crop species, detect diseases/pests/deficiencies, and provide structured diagnostic information. Returns ONLY diagnostic data (crop ID, health status, issue detection, growth stage). Does NOT provide treatment recommendations or regional advice - that should be handled by the calling agent.',
      {
        image: z.string().describe('Base64-encoded image of the plant (data:image/jpeg;base64,...). JPEG, PNG, or WebP. Max 5MB.'),
        crop: z.enum(SUPPORTED_CROPS).optional().describe('Optional: Expected crop type to verify against image. If provided, tool will validate if image matches. Supported: maize, wheat, rice, beans, vegetables, tea, coffee, etc.')
      },
      async ({ image, crop }) => {
        try {
          console.log(`[MCP Tool] diagnose_plant_disease called${crop ? ` for crop: ${crop}` : ''}`);

          // Check if Gemini is configured
          if (!genAI) {
            return {
              content: [{
                type: 'text',
                text: '‚ùå Plant diagnosis service is currently unavailable. Please try again later.'
              }],
              isError: true
            };
          }

          // Validate image data
          if (!image || image.length === 0) {
            return {
              content: [{
                type: 'text',
                text: 'Please provide an image of the plant for diagnosis.'
              }],
              isError: true
            };
          }

          // Extract image format and data from base64 string
          const base64Match = image.match(/^data:image\/(jpeg|jpg|png|webp);base64,(.+)$/);
          if (!base64Match) {
            return {
              content: [{
                type: 'text',
                text: 'Invalid image format. Please provide a JPEG, PNG, or WebP image in base64 format (data:image/jpeg;base64,...).'
              }],
              isError: true
            };
          }

          const mimeType = `image/${base64Match[1]}`;
          const imageData = base64Match[2];

          // Check image size
          const imageSizeBytes = (imageData.length * 3) / 4;
          const imageSizeMB = imageSizeBytes / (1024 * 1024);

          if (imageSizeMB > 5) {
            return {
              content: [{
                type: 'text',
                text: `Image is too large (${imageSizeMB.toFixed(1)}MB). Please provide an image smaller than 5MB.`
              }],
              isError: true
            };
          }

          console.log(`[AI Vision] Analyzing image (${imageSizeMB.toFixed(2)}MB, ${mimeType})${crop ? ` for ${crop}` : ''}`);
          console.log(`[AI Vision] Using model: ${GEMINI_IMAGE_MODEL}`);

          // Initialize Gemini model
          const model = genAI.getGenerativeModel({
            model: GEMINI_IMAGE_MODEL,
            generationConfig: {
              temperature: 0.4,
              topP: 0.95,
              topK: 40,
              maxOutputTokens: 2048, // Increased for detailed diagnostic reports
            }
          });

          // Construct prompt - DIAGNOSIS ONLY (region-agnostic)
          const cropContext = crop
            ? `The plant is expected to be ${crop.replace('_', ' ')}. Verify if the image matches this crop type.`
            : 'Identify the plant/crop species from the image.';

          const prompt = `You are an expert agricultural pathologist. Analyze this plant image and provide a structured diagnosis report.

${cropContext}

Provide your analysis in the following structured format:

üå± **CROP IDENTIFICATION:**
[Identify the crop/plant species with confidence level (High/Medium/Low)]
[If crop was specified but doesn't match: clearly state the mismatch]
[Format: "Crop: [Name] (Scientific: [Latin name]) - Confidence: [level]"]

üîç **HEALTH STATUS:**
[Overall health: Healthy / Mild Issue / Moderate Issue / Severe Issue / Critical]
[Confidence: High / Medium / Low]

‚ö†Ô∏è **ISSUE DETECTION:**
[If issues detected, list each one separately:]

**Issue 1: [Disease/Pest/Deficiency Name]**
- Scientific name: [Latin name if applicable]
- Category: [Disease/Pest/Nutrient Deficiency/Physical Damage/Other]
- Severity: [Low/Moderate/High/Critical]
- Stage: [Early/Active/Advanced]
- Affected parts: [Leaves/Stem/Roots/Fruit/Flowers/Entire plant]
- Visible symptoms: [Detailed list of what you observe]
- Causal agent: [Fungus/Bacteria/Virus/Insect/Mite/Environmental/Unknown]

[Repeat for each issue detected]

üìä **GROWTH STAGE:**
[Seedling/Vegetative/Flowering/Fruiting/Mature/Senescent]

üî¨ **DIAGNOSTIC NOTES:**
[Additional observations, differential diagnosis if multiple possibilities, uncertainty notes]

IMPORTANT RULES:
- Be specific about disease/pest names (use both common and scientific names)
- If image is unclear or doesn't show a plant, state this clearly
- If uncertain, provide confidence levels and alternative possibilities
- Focus ONLY on diagnosis - NO treatment recommendations, NO regional advice, NO farming tips
- Use precise botanical and pathological terminology
- Indicate if further laboratory testing is recommended for confirmation`;

          // Call Gemini API
          const result = await model.generateContent([
            prompt,
            {
              inlineData: {
                mimeType: mimeType,
                data: imageData
              }
            }
          ]);

          const response = result.response;
          const diagnosis = response.text();

          console.log('[AI Vision] Diagnosis completed successfully');

          return {
            content: [{
              type: 'text',
              text: diagnosis
            }]
          };

        } catch (error: any) {
          console.error('[MCP Tool] Error in diagnose_plant_disease:', error.message);

          if (error.message?.includes('API key')) {
            return {
              content: [{
                type: 'text',
                text: '‚ùå Plant diagnosis service configuration error. Please contact support.'
              }],
              isError: true
            };
          }

          if (error.message?.includes('quota')) {
            return {
              content: [{
                type: 'text',
                text: '‚ùå Plant diagnosis service is temporarily unavailable due to high demand. Please try again later.'
              }],
              isError: true
            };
          }

          return {
            content: [{
              type: 'text',
              text: 'Unable to analyze the plant image. Please ensure the image clearly shows the plant and try again.'
            }],
            isError: true
          };
        }
      }
    );

    // Connect and handle the request
    await server.connect(transport);
    await transport.handleRequest(req, res, req.body);

  } catch (error) {
    console.error('[MCP] Error:', error);
    res.status(500).json({
      jsonrpc: '2.0',
      error: {
        code: -32603,
        message: 'Internal server error',
        data: error instanceof Error ? error.message : 'Unknown error'
      },
      id: null
    });
  }
});

// Start server
const HOST = '0.0.0.0';
app.listen(Number(PORT), HOST, () => {
  console.log('');
  console.log('üöÄ =========================================');
  console.log('   Plant Health Diagnosis MCP Server');
  console.log('=========================================');
  console.log(`‚úÖ Server running on ${HOST}:${PORT}`);
  console.log(`üìç Health check: http://localhost:${PORT}/health`);
  console.log(`üåø MCP endpoint: http://localhost:${PORT}/mcp`);
  console.log(`üîë AI Vision API: ${GEMINI_API_KEY ? '‚úÖ Configured' : '‚ö†Ô∏è  NOT CONFIGURED'}`);
  console.log(`üåæ Supported crops: ${SUPPORTED_CROPS.length}`);
  console.log('=========================================');
  console.log('');
});
